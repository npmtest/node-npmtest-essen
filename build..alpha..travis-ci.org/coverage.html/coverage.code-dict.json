{"/home/travis/build/npmtest/node-npmtest-essen/test.js":"/* istanbul instrument in package npmtest_essen */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-essen/lib.npmtest_essen.js":"/* istanbul instrument in package npmtest_essen */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_essen = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_essen = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-essen/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-essen && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_essen */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_essen\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_essen.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_essen.rollup.js'] =\n            local.assetsDict['/assets.npmtest_essen.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_essen.__dirname + '/lib.npmtest_essen.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-essen/node_modules/essen/index.js":"#!/usr/bin/env node\n\nconst available_templates = [\n  'empty',\n  'users',\n]\n\nif (require.main === module) {\n  const ECli = require('./core/ECli.js')\n  require('yargs')\n    .usage('usage: $0 <command> [args]')\n    .command('create', 'Create new essen project', yargs => {\n      argv = yargs\n        .usage('usage: $0 create [args]')\n        .option('template', {\n          alias: 't',\n          describe: 'Creating project template'\n        })\n        .option('path', {\n          alias: 'p',\n          describe: 'Path to creating project'\n        })\n        .demandOption(['template', 'path'], 'Please provide both --template and --path arguments to create new project')\n        .argv\n        if (!available_templates.includes(argv.template)) {\n          console.log(`Unknown template '${argv.template}'. Use 'essen list' to get list of available templates`)\n        } else {\n          ECli.init(argv.template, argv.path)\n        }\n    })\n    .command({\n      command: 'list',\n      desc: 'List all available templates',\n      handler: argv => {\n        available_templates.forEach(template => {\n          console.log(template)\n        })\n      }\n    })\n    .help()\n    .demandCommand(1, 'You need at least 1 command to do something')\n    .example('essen create -t empty -p ./project_name', 'create empty essen project in ./project_name folder')\n    .argv\n} else {\n  module.exports = require('./core/ECore.js')\n}\n","/home/travis/build/npmtest/node-npmtest-essen/node_modules/essen/core/ECore.js":"const EPlugins = require('./EPlugins')\nconst EConfigurator = require('./EConfigurator')\nconst EMiddleware = require('./EMiddleware')\nconst EORM = require('./EORM')\nconst EServiceman = require('./EServiceman')\nconst EBootstrap = require('./EBootstrap')\nconst ERouter = require('./ERouter')\nconst EServer = require('./EServer')\n\nmodule.exports = class ECore {\n  static start() {\n    EPlugins.init()\n    .then(EConfigurator.init)\n    .then(EMiddleware.init)\n    .then(EORM.init)\n    .then(EServiceman.init)\n    .then(EBootstrap.init)\n    .then(ERouter.init)\n    .then(EServer.start)\n    .catch(err => {\n      log.error(err)\n      return process.exit(1)\n    })\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-essen/node_modules/essen/core/EPlugins.js":"const winston = require('winston')\nconst express = require('express')\n\nmodule.exports = class EPlugins {\n  static init() {\n    return new Promise((resolve, reject) => {\n      global.essen = {\n        server: express(),\n        config: {\n          path: process.cwd()\n        }\n      }\n      global.log = new winston.Logger({\n        transports: [\n          new (winston.transports.Console)({\n            colorize: true,\n            timestamp: () => new Date().toTimeString().split(' ')[0],\n            formatter(options) {\n              return options.timestamp()\n                + ' - '\n                + winston.config.colorize(options.level, options.level.toUpperCase())\n                + ' - '\n                + (options.message ? options.message : '')\n                + (options.meta && Object.keys(options.meta).length ? '\\n' + JSON.stringify(options.meta, null, 2) : '' );\n            },\n          }),\n        ],\n      })\n      global.log.level = 'silly'\n      log.debug('EPlugins loaded')\n      return resolve()\n    })\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-essen/node_modules/essen/core/EConfigurator.js":"const _ = require('underscore')\nconst fs = require('fs')\nconst fse = require('fs-extra')\nconst express = require('express')\nconst path = require('path')\n\nmodule.exports = class EConfigurator {\n  static init() {\n    EConfigurator.path = path.join(essen.config.path, 'config')\n    return new Promise((resolve, reject) => {\n      EConfigurator.readConfigs((err, config) => {\n        if (err) reject(`EConfigurator error ${err}`)\n        log.level = config.log.level\n        essen.config = Object.assign(config, essen.config)\n        log.debug('EConfigurator loaded')\n        return resolve()\n      })\n    })\n  }\n  static readConfigs(cb) {\n    let config = {}\n    config.socket = require(path.join(EConfigurator.path, 'socket.js'))\n    config.custom = require(path.join(EConfigurator.path, 'custom.js'))\n    config.db = require(path.join(EConfigurator.path, 'db.js'))\n    config.server = require(path.join(EConfigurator.path, 'server.js'))\n    config.log = require(path.join(EConfigurator.path, 'log.js'))\n    config.middleware = require(path.join(EConfigurator.path, 'middleware.js'))\n    fs.readdir(EConfigurator.path, (err, files) => {\n      if (files.includes('env.js')) {\n        let env_config = require(path.join(EConfigurator.path, 'env.js'))\n        env_config = env_config[process.env.NODE_ENV] ? env_config[process.env.NODE_ENV] : {}\n        config.socket = _.extend(config.socket, env_config.socket ? env_config.socket : {})\n        config.custom = _.extend(config.custom, env_config.custom ? env_config.custom : {})\n        config.db = _.extend(config.db, env_config.db ? env_config.db : {})\n        config.server = _.extend(config.server, env_config.server ? env_config.server : {})\n        config.log = _.extend(config.log, env_config.log ? env_config.log : {})\n        config.middleware = _.extend(config.middleware, env_config.middleware ? env_config.middleware : {})\n        return cb(null, config)\n      } else {\n        return cb(null, config)\n      }\n    })\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-essen/node_modules/essen/core/EMiddleware.js":"const express = require('express')\nconst bodyParser = require('body-parser')\nconst path = require('path')\nconst fs = require('fs')\nconst async = require('async')\n\nmodule.exports = class EMiddleware {\n  static init() {\n    return new Promise((resolve, reject) => {\n      EMiddleware.essen = essen\n      EMiddleware.uses = {}\n      EMiddleware.loadDefaultMiddlewares(err => {\n        if (err) reject(`middleware init error ${err}`)\n        EMiddleware.loadCustomMiddlewares(err => {\n          if (err) reject(`middleware init error ${err}`)\n          EMiddleware.initCustomMiddlewares(err => {\n            if (err) reject(`middleware init error ${err}`)\n            log.debug('EMiddleware loaded')\n            return resolve()\n          })\n        })\n      })\n    })\n  }\n  static loadDefaultMiddlewares(cb) {\n    EMiddleware.essen.server.use(bodyParser.urlencoded({ extended: false }))\n    EMiddleware.essen.server.use(bodyParser.json())\n    EMiddleware.essen.server.use(express.static(path.join(EMiddleware.essen.config.path, 'dist')))\n    return cb()\n  }\n  static loadCustomMiddlewares(cb) {\n    const middleware_path = path.join(EMiddleware.essen.config.path, 'middleware')\n    fs.readdir(middleware_path, (err, files) => {\n      async.each(files, (file, next) => {\n        const file_path = path.join(middleware_path, file)\n        const middleware_name = file.split('.')[0]\n        EMiddleware.uses[middleware_name] = file_path\n        return next()\n      }, cb)\n    })\n  }\n  static initCustomMiddlewares(cb) {\n    async.each(EMiddleware.essen.config.middleware, (middleware, next) => {\n      EMiddleware.essen.server.use(require(EMiddleware.uses[middleware]))\n      return next()\n    }, cb)\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-essen/node_modules/essen/core/EORM.js":"const async = require('async')\nconst fs = require('fs')\nconst path = require('path')\nconst mongoose = require('mongoose')\n\nmodule.exports = class EORM {\n  static init() {\n    mongoose.Promise = global.Promise\n    EORM.models = {}\n    return new Promise((resolve, reject) => {\n      EORM.loadModels(err => {\n        if (err) reject(`ORM models error ${err}`)\n        EORM.initGlobalModels(err => {\n          if (err) reject('ORM models error', err)\n          log.debug('ORM models loaded')\n          return resolve()\n        })\n      })\n    })\n  }\n  static loadModels(cb) {\n    const models_path = path.join(essen.config.path, 'models')\n    fs.readdir(models_path, (err, files_names) => {\n      async.each(files_names, (file_name, next) => {\n        const model = {\n          file_name,\n          name: file_name.split('Model')[0],\n          file_path: path.join(models_path, file_name),          \n        }\n        EORM.loadModel(model, err => {\n          if (err) return cb(err)\n          return next()\n        })\n      }, cb)\n    })\n  }\n  static loadModel(model, cb) {\n    const schema_object = require(model.file_path)\n    model.attributes = schema_object.attributes || {}\n    model.methods = schema_object.methods || {}\n    model.statics = schema_object.statics || {}\n    model.pre = schema_object.pre || {}\n    model.post = schema_object.post || {}\n    const schema = new mongoose.Schema(model.attributes)\n    for (let method in model.statics) {\n      schema.statics[method] = model.statics[method]\n    }\n    for (let method in model.methods) {\n      schema.methods[method] = model.methods[method]\n    }\n    for (let event in model.pre) {\n      schema.pre(event, model.pre[event])\n    }\n    for (let event in model.post) {\n      schema.post(event, model.post[event])\n    }\n    EORM.models[model.name] = mongoose.model(model.name, schema)\n    return cb()\n  }\n  static initGlobalModels(cb) {\n    const config = essen.config.db\n    if (config.login && config.password) {\n      mongoose.connect(`mongodb://${config.login}:${config.password}@${config.host}:${config.port}/${config.name}`)\n    } else {\n      mongoose.connect(`mongodb://${config.host}:${config.port}/${config.name}`)      \n    }\n    for (let model_name in EORM.models) {\n      global[model_name] = EORM.models[model_name]\n    }\n    return cb()\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-essen/node_modules/essen/core/EServiceman.js":"const async = require('async')\nconst path = require('path')\nconst fs = require('fs')\n\nmodule.exports = class EServiceman {\n  static init() {\n    return new Promise((resolve, reject) => {\n      EServiceman.path = path.join(essen.config.path, 'services')\n      EServiceman.loadServices(err => {\n        if (err) reject (`services init error ${err}`)\n        log.debug('EServiceman loaded')\n        return resolve()\n      })\n    })\n  }\n  static loadServices(cb) {\n    fs.readdir(EServiceman.path, (err, files_names) => {\n      async.each(files_names, (file_name, next) => {\n        let file_path = path.join(EServiceman.path, file_name)\n        let service_name = file_name.split('.')[0]\n        global[service_name] = require(file_path)\n        return next()\n      }, cb)\n    })\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-essen/node_modules/essen/core/EBootstrap.js":"const express = require('express')\nconst path = require('path')\n\nmodule.exports = class EBootstrap {\n  static init(cb) {\n    return new Promise((resolve, reject) => {\n      try {\n        const config_path = path.join(essen.config.path, 'config/bootstrap.js')\n        const bootstrap = require(config_path)\n        if (bootstrap && bootstrap.beforeStart) {\n          bootstrap.beforeStart(err => {\n            if (bootstrap.afterStart) {\n              essen.afterStart = bootstrap.afterStart\n              return resolve()\n            } else {\n              return resolve()\n            }\n          })\n        }\n      } catch(err) {\n        return reject(`bootstrap execute error ${err}`)\n      }\n    })\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-essen/node_modules/essen/core/ERouter.js":"const fs = require('fs')\nconst path = require('path')\nconst async = require('async')\n\nmodule.exports = class ERouter {\n  static init() {\n    return new Promise((resolve, reject) => {\n      ERouter.controllers = {}\n      ERouter.loadRoutes(routes => {\n        ERouter.listenRoutes('/', routes, err => {\n          if (err) reject(err)\n          log.debug('ERouter inited')\n          resolve()\n        })\n      })\n    })\n  }\n  static loadRoutes(cb) {\n    const routes = require(path.join(essen.config.path, 'router/router.js'))\n    return cb(routes)\n  }\n  static listenRoutes(namespace, routes, cb) {\n    async.each(routes, (route, next) => {\n      ERouter.listenRoute(namespace, route, err => {\n        if (err) return next(err)\n        return next()\n      })\n    }, err => {\n      return cb(err)\n    })\n  }\n  static listenRoute(namespace, route, cb) {\n    if (!route.namespace) {\n      let controller_path = path.join(essen.config.path, 'controllers', namespace, route.controller + '.js')\n      let controller\n      try {\n        controller = require(controller_path)\n      } catch(e) {\n        console.log(namespace, route)\n        return cb(`controller ${route.controller} is not found in ${controller_path}`)\n      }\n      let final_path = namespace + route.path\n      log.verbose(route.controller + ':' + route.action + ' listen to ' + final_path)\n      if (!controller[route.action]) {\n        return cb(`action '${route.action}' not found in '${route.controller}'`)\n      } else {\n        essen.server[route.type.toLowerCase()](namespace + route.path, controller[route.action])\n      }\n      if (route.children) {\n        namespace = namespace + route.path + '/'\n        ERouter.listenRoutes(namespace, route.children, err => {\n          return cb(err)\n        })\n      } else {\n        return cb()\n      }\n    } else {\n      if (route.children) {\n        namespace = namespace + route.namespace + '/'\n        ERouter.listenRoutes(namespace, route.children, err => {\n          return cb(err)\n        })\n      } else {\n        return cb()\n      }\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-essen/node_modules/essen/core/EServer.js":"module.exports = class EServer {\n  static start() {\n    const server = require('http').createServer(essen.server)\n    if (essen.config.socket.enabled) {\n      essen.io = require('socket.io')(server)      \n    }\n    return new Promise((resolve, reject) => {\n      server.listen(process.env.PORT || essen.config.server.port, err => {\n        if (err) reject(`start server error ${err}`)\n        log.info(`${essen.config.server.name} listening on port ${process.env.PORT || essen.config.server.port}`)\n        log.info(`using db ${essen.config.db.name} at ${essen.config.db.host}`)\n        if (essen.afterStart) essen.afterStart()\n        resolve()\n      })\n    })\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-essen/node_modules/essen/core/ECli.js":"const fs = require('fs')\nconst fse = require('fs-extra')\nconst path = require('path')\nconst exec = require('child_process').exec\n\nmodule.exports = class ECli {\n  static init(template, dest) {\n    // ECli.create()\n    ECli.path = path.join(__dirname, '../templates/', template)\n    if (dest.split('')[0] == '/') {\n      ECli.dest = dest\n    } else {\n      ECli.dest = path.join(process.cwd(), dest)\n    }\n    ECli.create()\n  }\n  static create() {\n    fse.ensureDir(ECli.dest, err => {\n      fs.readdir(ECli.dest, (err, files) => {\n        if (files.length) {\n          console.log(`Directory ${ECli.dest} is not empty`)\n        } else {\n          fse.copySync(path.join(ECli.path, 'package.json'), path.join(ECli.dest, 'package.json'))\n          fse.copySync(path.join(ECli.path, 'controllers'), path.join(ECli.dest, 'controllers'))\n          fse.copySync(path.join(ECli.path, 'models'), path.join(ECli.dest, 'models'))\n          fse.copySync(path.join(ECli.path, 'services'), path.join(ECli.dest, 'services'))\n          fse.copySync(path.join(ECli.path, 'middleware'), path.join(ECli.dest, 'middleware'))\n          fse.copySync(path.join(ECli.path, 'router'), path.join(ECli.dest, 'router'))\n          fse.copySync(path.join(ECli.path, 'config'), path.join(ECli.dest, 'config'))\n          fse.copySync(path.join(ECli.path, 'app.js'), path.join(ECli.dest, 'app.js'))\n          process.chdir(ECli.dest)\n          exec('npm install', (err, stdout, stderr) => {\n            console.log(`essen empty project successfully created at ${ECli.dest}`)            \n          }).stderr.pipe(process.stderr)\n        }\n      })\n    })\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-essen/node_modules/essen/templates/empty/app.js":"const Essen = require('essen')\nEssen.start()\n","/home/travis/build/npmtest/node-npmtest-essen/node_modules/essen/templates/empty/config/bootstrap.js":"/*\n\nbootstrap.js configuration\n\nHere you need to export two functions: beforeStart() and afterStart()\nBy default beforeStart() get an next property as callback. \nYou must call it after your stuff\nYou dont need to return something in afterStart() function\n\n*/\n\nmodule.exports = {\n  beforeStart(next) {\n    next()\n  },\n  afterStart() {\n    \n  }\n}\n","/home/travis/build/npmtest/node-npmtest-essen/node_modules/essen/templates/empty/config/custom.js":"/*\n\ncustom.js configuration\n\nHere you can define your custom variables, used globally in your project\nYour vars will be available like essen.config.custom['variable name']\n\n*/\n\nmodule.exports = {\n  \n}\n","/home/travis/build/npmtest/node-npmtest-essen/node_modules/essen/templates/empty/config/db.js":"/*\n\ndb.js configuration\n\nUse this fields to configure connection to MongoDB\n  host: 'localhost' - hostname, where your mongoDB is\n  port: 27017 - by default 27017, you can cpecify another\n  name: 'mydbname' - database name to use\n  login: 'root' - user, allowed to use DB\n  password: 'toor' - password for user\n \n*/\n\nmodule.exports = {\n  host: 'localhost',\n  port: 27017,\n  name: 'essen',\n  login: '',\n  password: '',\n}\n","/home/travis/build/npmtest/node-npmtest-essen/node_modules/essen/templates/empty/config/env.js":"/* \n\nenv.js configuration\n\nUse this to owerride other configuration files, depending on your\nNODE_ENV environment\nFor example:\n  development: { db : { host : 'env_sensitive_host' } } - will owerride\n  db.host option, if you use NODE_ENV='development' \n\n*/\n\nmodule.exports = {\n  \n}\n","/home/travis/build/npmtest/node-npmtest-essen/node_modules/essen/templates/empty/config/middleware.js":"/*\n\nmiddleware.js configuration\n\nThis array - is a muddlewares array, which you want to use in your requests. \nThe order is important. It means, that the first element of array will handle \nrequests at first.\n\n*/\n\nmodule.exports = [\n  'logRequests',\n]\n","/home/travis/build/npmtest/node-npmtest-essen/node_modules/essen/templates/empty/config/server.js":"/*\n\nserver.js configuration\n\nUse this fields to configure server\n  port: 10000 - port, server use to listen to requests\n  name: 'essen' - no matters, just a name\n \n*/\n\nmodule.exports = {\n  port: 10000,\n  name: 'essen',\n}\n","/home/travis/build/npmtest/node-npmtest-essen/node_modules/essen/templates/empty/config/socket.js":"module.exports = {\n  enabled: false\n}\n","/home/travis/build/npmtest/node-npmtest-essen/node_modules/essen/templates/empty/controllers/IndexController.js":"module.exports = {\n  index(req, res) {\n    bookService.getBooks((err, books) => {\n      if (err) return res.status(500).json({ err })\n      res.json({ books, msg: 'Here we have some books' })\n    })\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-essen/node_modules/essen/templates/empty/middleware/logRequests.js":"module.exports = (req, res, next) => {\n  if (req.url) console.log(req.url)\n  next()\n}\n","/home/travis/build/npmtest/node-npmtest-essen/node_modules/essen/templates/empty/models/BookModel.js":"module.exports = {\n  attributes: {\n    name: {\n      type: String,\n      required: true,\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-essen/node_modules/essen/templates/empty/router/router.js":"module.exports = [\n  {\n    path: '',\n    type: 'get',\n    controller: 'IndexController',\n    action: 'index',\n  }\n]\n","/home/travis/build/npmtest/node-npmtest-essen/node_modules/essen/templates/empty/services/bookService.js":"module.exports = {\n  getBooks(cb) {\n    Book\n    .find({})\n    .exec((err, db_books) => {\n      if (err) return cb(err)\n      return cb(null, db_books)\n    })\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-essen/node_modules/essen/templates/users/models/UserModel.js":"const bcrypt = require('bcryptjs')\n\nmodule.exports = {\n  attributes: {\n    login: {\n      type: String,\n      required: true,\n    },\n    password: {\n      type: String,\n      required: true,\n    }\n  },\n  pre: {\n    'save'(next) {\n      let user = this\n      bcrypt.genSalt(10, (err, salt) => {\n        bcrypt.hash(user.password, salt, (err, hash) => {\n          user.password = hash\n          return next()\n        })\n      })\n    }\n  }\n}\n"}